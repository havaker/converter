use goblin::{
    elf,
    elf64::sym::{STB_GLOBAL, STB_LOCAL, STB_WEAK, STT_FUNC, STV_DEFAULT},
    error, Object,
};
use std::{cell::RefCell, env, ffi::OsString, fs, rc::Rc};

mod rel;
use rel::*;

// TODO R_X86_64_32 or R_X86_64_32S

fn main() -> error::Result<()> {
    let args: Vec<OsString> = env::args_os().collect();
    if args.len() != 3 {
        panic!("invalid argument count");
    }

    let input_path = &args[1];
    let output_path = &args[2];
    dbg!(&args);

    let buffer = fs::read(input_path)?;

    let converted = match Object::parse(&buffer)? {
        Object::Elf(elf) => convert(elf, &buffer),
        _ => panic!("invalid file type"),
    };

    fs::write(output_path, &converted)?;

    Ok(())
}

fn convert(elf: elf::Elf, buffer: &Vec<u8>) -> Vec<u8> {
    let mut e = rel::Elf::new(&elf, buffer);

    let section_names = &e
        .sections
        .iter()
        .map(|s| s.borrow().name.clone())
        .collect::<Vec<_>>();

    //dbg!(&e.reloc_sections);
    dbg!(&section_names);

    for section in &mut e.reloc_sections {
        section.to_rela();
    }

    let is_global_func = |symbol: &&Rc<RefCell<Symbol>>| {
        let sym: &elf::Sym = &symbol.borrow().sym;
        let is_function = sym.st_type() == STT_FUNC;
        let is_global = sym.st_bind() == STB_GLOBAL || sym.st_bind() == STB_WEAK;

        is_function && is_global
    };

    let mut global_func_symbols = e
        .symtab
        .symbols
        .iter()
        .filter(is_global_func)
        .cloned()
        .collect::<Vec<_>>();

    let mut thunkins = Vec::new();

    use keystone::*;
    let engine =
        Keystone::new(Arch::X86, Mode::MODE_64).expect("Could not initialize Keystone engine");
    engine
        .option(OptionType::SYNTAX, OptionValue::SYNTAX_GAS)
        .expect("Could not set option to nasm syntax");
    let prepend = engine
        .asm("pushq %rbx; pushq %rbp; pushq %r12; pushq %r13; pushq %r14; pushq %r15; subq $0x18, %rsp; movq %rdx, 8(%rsp); movl %esi, 4(%rsp); movl %edi, (%rsp)".to_string(), 0)
        .expect("Could not assemble").bytes;
    let append = engine
        .asm("mov %eax, %eax; shlq $32, %rdx; orq %rdx, %rax; addq $0x18, %rsp; popq %r15; popq %r14; popq %r13; popq %r12; popq %rbp; popq %rbx; retq".to_string(), 0)
        .expect("Could not assemble").bytes;

    for func in &mut global_func_symbols {
        let mut thunk = Thunk::new(func.clone());
        thunk.prepend_text(prepend.as_slice());
        thunk.append_text(append.as_slice());

        // dbg!(&thunk.text_relocs);
        // dbg!(&thunk.text);
        //let thunkin = create_thunkin(func.clone());
        thunkins.push(thunk);

        let mut sym = func.borrow_mut();
        sym.sym.st_info = create_st_info(STB_LOCAL, STT_FUNC);
    }

    let thunk = merge_thunks(thunkins.into_iter());
    e.merge(thunk);

    // dbg!(&func_symbols);

    e.serialize()
}

fn merge_thunks(mut thunks: impl Iterator<Item = Thunk>) -> Elf {
    let mut e: Elf = Default::default();

    let mut first = match thunks.next() {
        Some(thunk) => thunk,
        None => return e,
    };

    for thunk in thunks {
        first.merge_sections(thunk);
    }

    e.sections.push(first.text);
    e.sections.push(first.rodata);
    e.reloc_sections.push(first.text_relocs);
    e.reloc_sections.push(first.rodata_relocs);
    e.symtab.symbols.push(first.text_symbol);
    e.symtab.symbols.push(first.rodata_symbol);
    e.symtab.extend(first.generated_fun_symbols);

    e
}

#[derive(Debug, Clone)]
struct Thunk {
    text: Rc<RefCell<Section>>,
    text_relocs: RelocSection,
    text_symbol: Rc<RefCell<Symbol>>,

    rodata: Rc<RefCell<Section>>,
    rodata_relocs: RelocSection,
    rodata_symbol: Rc<RefCell<Symbol>>,

    generated_fun_symbols: Vec<Rc<RefCell<Symbol>>>,
}

impl Thunk {
    fn merge_sections(&mut self, mut other: Thunk) {
        let self_text_len = self.text.borrow().content.len();
        let self_rodata_len = self.rodata.borrow().content.len();

        self.text
            .borrow_mut()
            .extend(other.text.borrow().content.as_slice());
        self.rodata
            .borrow_mut()
            .extend(other.rodata.borrow().content.as_slice());

        other.text = self.text.clone();
        other.rodata = self.rodata.clone();

        // other.section_symbols = self.section_symbols.clone();

        // add symbols generated by other thunk to self, shift them by text.len()
        let self_text = self.text.clone(); // borrow checker
        let other_generated_fun_symbols =
            other.generated_fun_symbols.into_iter().map(|symbol_rc| {
                {
                    let symbol: &mut Symbol = &mut symbol_rc.borrow_mut();
                    symbol.section = Some(self_text.clone());
                    symbol.sym.st_value += self_text_len as u64;
                }

                symbol_rc
            });
        self.generated_fun_symbols
            .extend(other_generated_fun_symbols);

        Self::shift_relocs(
            &mut other.text_relocs,
            self.rodata_symbol.clone(),
            self_rodata_len,
            self_text_len,
        );
        Self::shift_relocs(
            &mut other.rodata_relocs,
            self.text_symbol.clone(),
            self_text_len,
            self_rodata_len,
        );

        self.text_relocs.relocs.extend(other.text_relocs.relocs);
        self.rodata_relocs.relocs.extend(other.rodata_relocs.relocs);
    }

    fn shift_relocs(
        reloc_section: &mut RelocSection,
        source_section_symbol: Rc<RefCell<Symbol>>,
        source_section_shift: usize,
        target_section_shift: usize,
    ) {
        let section_name = source_section_symbol.borrow().section_name().unwrap();

        for reloc in reloc_section.relocs.iter_mut() {
            let symbol_section = reloc.symbol.borrow().section_name();

            match symbol_section.as_ref() {
                Some(name) if name == &section_name => {
                    reloc.symbol = source_section_symbol.clone();
                    if let Some(addend) = &mut reloc.reloc.r_addend {
                        *addend += source_section_shift as i64;
                    }
                }
                Some(_) => (),
                _ => unreachable!(),
            }

            reloc.reloc.r_offset += target_section_shift as u64;
        }
    }

    fn replace_fun_symbol(&mut self, fun_symbol: Rc<RefCell<Symbol>>) {
        for reloc in &mut self.text_relocs.relocs {
            if reloc.symbol.borrow().name.as_ref().map(|n| n.as_str()) == Some("fun") {
                reloc.symbol = fun_symbol.clone();
            }
        }
    }

    // func symbol
    // asm / signature
    fn new(fun_symbol: Rc<RefCell<Symbol>>) -> Self {
        let buffer = fs::read("../assets/call32from64.o").unwrap();

        let elf = match Object::parse(&buffer).unwrap() {
            Object::Elf(elf) => Elf::new(&elf, &buffer),
            _ => panic!("invalid file type"),
        };

        let text = elf.section_by_name(".text").unwrap();
        let rodata = elf.section_by_name(".rodata").unwrap();

        let text_relocs = elf.reloc_section_by_name(".text").unwrap();
        let rodata_relocs = elf.reloc_section_by_name(".rodata").unwrap();

        // change name
        // TODO in/out
        text.borrow_mut().name = ".text.thunk".into();
        rodata.borrow_mut().name = ".rodata.thunk".into();

        let fun_name = fun_symbol.borrow().name.clone().unwrap();
        let generated_fun_symbol = Rc::new(RefCell::new(Symbol {
            name: Some(fun_name.clone()),
            section: Some(text.clone()),
            sym: elf::Sym {
                st_name: 0,
                st_info: create_st_info(STB_GLOBAL, STT_FUNC),
                st_other: STV_DEFAULT,
                st_shndx: 0,
                st_value: 0,
                st_size: text.borrow().content.len() as u64,
            },

            index: None,
        }));

        let mut thunk = Self {
            text,
            rodata,
            text_relocs,
            rodata_relocs,
            text_symbol: elf.section_symbol_by_name(".text.thunk").unwrap(),
            rodata_symbol: elf.section_symbol_by_name(".rodata.thunk").unwrap(),
            generated_fun_symbols: vec![generated_fun_symbol],
        };

        thunk.replace_fun_symbol(fun_symbol);
        thunk
    }

    fn append_text(&mut self, text: &[u8]) {
        self.text.borrow_mut().extend(text);
        for symbol in &self.generated_fun_symbols {
            symbol.borrow_mut().sym.st_size += text.len() as u64;
        }
    }

    fn prepend_text(&mut self, text: &[u8]) {
        self.text.borrow_mut().extend_front(text);

        //self.generated_fun_symbol.borrow_mut().sym.st_value += text.len() as u64;

        for reloc in &mut self.text_relocs.relocs {
            reloc.reloc.r_offset += text.len() as u64;
        }
        for reloc in &mut self.rodata_relocs.relocs {
            if let Some(addend) = &mut reloc.reloc.r_addend {
                *addend += text.len() as i64;
            }
        }
    }
}

fn create_st_info(bind: u8, symbol_type: u8) -> u8 {
    (bind << 4) + (symbol_type & 0xf)
}
